
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

public class DrawingApp extends JFrame {

	public DrawingApp() { // 생성자
		super("Drawing Application");

		buildGUI();
		createMenuBar();

		this.setSize(800, 600);
		this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		this.addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(WindowEvent e) {
				int rval = JOptionPane.showConfirmDialog(DrawingApp.this, "종료 하시겠습니까?", "확인",
						JOptionPane.YES_NO_OPTION);

				if (rval == JOptionPane.YES_OPTION) {
					System.exit(0);
				}

				JOptionPane.showMessageDialog(DrawingApp.this, "종료가 취소되었습니다.", "알림", JOptionPane.INFORMATION_MESSAGE);

			}

		});

		this.setVisible(true);
	}

	private void buildGUI() {
		// TODO Auto-generated method stub
		
	}

	private void createMenuBar() { // 메뉴바 만들기

		JMenuBar menuBar = new JMenuBar();

		menuBar.add(createFileMenu());
		menuBar.add(createShapeMenu());

		this.setJMenuBar(menuBar);

	}

	private JMenu createShapeMenu() { // 모양 메뉴 만들기

		JMenu shapeMenu = new JMenu("Shape");

		JMenuItem circleItem = new JMenuItem("Circle");
		JMenuItem squareItem = new JMenuItem("Square");

		// Circle 메뉴 아이템에 대한 ActionListener
		circleItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				DrawingPanel.setSelectedShapeType(DrawingPanel.CIRCLE);
			}

		});

		// Square 메뉴 아이템에 대한 ActionListener
		squareItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				DrawingPanel.setSelectedShapeType(DrawingPanel.SQUARE);

			}

		});

		shapeMenu.add(circleItem);
		shapeMenu.add(squareItem);

		return shapeMenu;
	}

	private JMenu createFileMenu() { // 파일 메뉴 만들기
	    JMenu fileMenu = new JMenu("File");

	    JMenuItem newMenuItem = new JMenuItem("New");
	    JMenuItem loadMenuItem = new JMenuItem("Load");
	    JMenuItem saveMenuItem = new JMenuItem("Save");

	    JFileChooser fileChooser = new JFileChooser();

	    // "New" 메뉴 아이템에 대한 ActionListener
	    newMenuItem.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	        	DrawingPanel.clear(); 	        }
	    });

	    // "Load" 메뉴 아이템에 대한 ActionListener
	    loadMenuItem.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	            int returnVal = fileChooser.showOpenDialog(DrawingApp.this); // 불러오기 대화상자 표시
	            if (returnVal == JFileChooser.APPROVE_OPTION) {
	                // 사용자가 파일을 선택했을 때의 작업 수행
	                String filePath = fileChooser.getSelectedFile().getPath();
	                loadFromTxFile(filePath);
	            }
	        }
	    });

	    // "Save" 메뉴 아이템에 대한 ActionListener
	    saveMenuItem.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	            int returnVal = fileChooser.showSaveDialog(DrawingApp.this); // 저장 대화상자 표시
	            if (returnVal == JFileChooser.APPROVE_OPTION) {
	                // 사용자가 저장을 선택했을 때의 작업 수행
	                String filePath = fileChooser.getSelectedFile().getPath();
	                saveToTxFile(filePath);
	            }
	        }
	    });

	    fileMenu.add(newMenuItem);
	    fileMenu.add(loadMenuItem);
	    fileMenu.add(saveMenuItem);

	    return fileMenu;
	}

	protected void loadFromTxFile(String filePath) {
		// TODO Auto-generated method stub
		
	}

	protected void saveToTxFile(String filePath) {
		// TODO Auto-generated method stub
		
	}

